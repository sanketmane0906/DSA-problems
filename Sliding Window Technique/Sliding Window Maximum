/* 
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7




*/
//****************************************************** Code in JAVA****************************************************************************

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        int n=nums.length;
        ArrayDeque<Integer> dq= new ArrayDeque<>();
        int rightIndex=0;
        int[] result= new int[n-k+1];

        for(int i=0; i<n; i++)
        {
            //Remove Out-of-Bound Elements
            while(!dq.isEmpty() && dq.peek()==i-k)
            {
                dq.pollFirst();//  0, 1, 2 will be inserted but when i=3 and k=3 i-k=3-3=0 && dq.ppek() is also 0 so popFirst because exceeding window size
            }

            while(!dq.isEmpty() && nums[dq.peekLast()]<nums[i])
            {
                dq.pollLast();  // Remove smaller elements from the back
            }

            //Add the Current Element
            dq.offer(i);

            if(i>=k-1) //we start inserting in result when we reach window size
            {
                result[rightIndex++]=nums[dq.peekFirst()];  // Front of deque is the maximum
            }
        }
        return result;
    }
}
