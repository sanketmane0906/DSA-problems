
Given an integer array nums of unique elements, return all possible 
subsets(the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Recursive Call     	tempList	      i (Pointer)

subsets([], 0)	      []	              0
subsets([1], 1)     	[1]             	1
subsets([1,2], 2)   	[1,2]	            2
subsets([1,2,3], 3) 	[1,2,3]	          3

Backtrack	[1,2]	

subsets([1,3], 3)	     [1,3]	          3

Backtrack	[1]	

subsets([2], 2)      	 [2]	            2
subsets([2,3], 3)	     [2,3]	          3

Backtrack	[2]	

subsets([3], 3)	       [3]	            3

Backtrack	[]	

so lets code it :-

class Solution {
    public void backtrack(List<List<Integer>>result, List<Integer> tempList, int[] nums, int j)
    {
        result.add(new ArrayList<>(tempList));

        for(int i=j; i<nums.length; i++)
        {
            if(!tempList.contains(nums[i]))
            {
                tempList.add(nums[i]);
            }

            backtrack(result,tempList, nums, i+1);

            tempList.remove(tempList.size()-1);
        }
    }
    public List<List<Integer>> subsets(int[] nums) {
        
        List<List<Integer>> result= new ArrayList<>();

        List<Integer> tempList= new ArrayList<>();

        backtrack(result, tempList, nums,0);

        return result;
    }
}
