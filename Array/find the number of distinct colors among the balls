You have a row of balls (numbered from 1 to limit). Each ball can be painted with a color. 
You will receive a list of queries, where each query consists of:

[ball_number, color]

This means you have to paint the ball_number with the given color.
If the ball was already painted with a different color, remove the previous color from the count.
At each step, count the number of unique colors in the entire row of balls.
ðŸ”¹ Goal: Return an array where each element represents the number of unique colors after each query.

So lets code it :-

import java.util.*;

class Solution {
    public int[] queryResults(int limit, int[][] queries) {
        HashMap<Integer, Integer> colorFreq = new HashMap<>(); // To store color frequency
        HashMap<Integer, Integer> ballColor = new HashMap<>(); // To track which color each ball has
        List<Integer> list = new ArrayList<>(); // To store results

        for (int[] pair : queries) {
            int ball = pair[0];  // Get the ball number
            int color = pair[1]; // Get the color

            // Check if the ball was already painted
            if (ballColor.containsKey(ball)) { // If it was previously painted
                int prevColor = ballColor.get(ball); // Get its previous color
                colorFreq.put(prevColor, colorFreq.get(prevColor) - 1); // Decrease count

                // If the previous color is no longer used, remove it
                if (colorFreq.get(prevColor) == 0) {
                    colorFreq.remove(prevColor);
                }
            }

            // Paint the ball with the new color
            ballColor.put(ball, color);
            colorFreq.put(color, colorFreq.getOrDefault(color, 0) + 1); // Increase count

            // Store the current number of unique colors
            list.add(colorFreq.size());
        }

        // Convert list to int array
        int[] ans = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            ans[i] = list.get(i);
        }

        return ans;
    }
}

Dry run ;-

limit = 5
queries = [[1, 2], [2, 3], [1, 3], [3, 2], [4, 2]]

Step	Ball Painted	New Color	   Unique Colors Count
1	       1	              2	           1
2        2	              3	           2
3	       1	              3	           1 (ball 1 changed from 2 â†’ 3, removing color 2)
4	       3	              2	           2
5	       4	              2	           2

output :-
[1, 2, 1, 2, 2]

How It Works
ballColor keeps track of which ball has which color.
colorFreq stores how many times each color appears.
Whenever a ball is repainted, the old color count is reduced, and if it reaches 0, it's removed from the map.
After every query, we count the unique colors in colorFreq and store the result.
