In this problem we have to find duplicate in the array.

This problem has 2 approaches :-

1) Floyd's Cycle detection Algorithm:-

I) Initialization:

 * slow and fast both start at index 0.
 * slow moves one step at a time: slow = nums[slow].
 * fast moves two steps at a time: fast = nums[nums[fast]].


II) Detecting a Cycle:

 * Since the numbers in the array act like pointers (redirecting to other indices), this creates a linked list structure.
 * If there is a duplicate number, at some point, both pointers must enter a cycle.
 * Inside the cycle, fast moves twice as fast as slow, meaning it will eventually catch up to slow (just like in a circular track).

III)Loop Termination:

 * The do-while loop runs until slow == fast, meaning both pointers meet inside the cycle, confirming that a duplicate exists.

example -

nums = [1, 3, 4, 2, 2]

Initial State:

slow = nums[0] = 1
fast = nums[nums[0]] = nums[1] = 3
First Iteration:

slow = nums[1] = 3
fast = nums[nums[3]] = nums[2] = 4
Second Iteration:

slow = nums[3] = 2
fast = nums[nums[4]] = nums[2] = 4
Third Iteration:

slow = nums[2] = 4
fast = nums[nums[2]] = nums[4] = 2
Fourth Iteration:

slow = nums[4] = 2
fast = nums[nums[4]] = nums[2] = 4
Fifth Iteration:

slow = nums[2] = 4
fast = nums[nums[2]] = nums[4] = 2

Now, slow == fast, so the loop terminates.
At this point, a cycle is detected, confirming that a duplicate exists.

So lets code it :-

class Solution {
    public int findDuplicate(int[] nums) {
        
        int slow=0;
        int fast=0;

        do
        {
            slow=nums[slow];
            fast=nums[nums[fast]];
        }
        while(slow!=fast);

        slow=0;

        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
}


2) using HashMap (calculating frequency) :-

In this problem we will calculating the frequency of the each element'

And using EntrySet we will traverse over the HashMap and we will return that element which has frequency more than the 1

So lets code it :-

class Solution {
    public int findDuplicate(int[] nums) {
        
        HashMap<Integer, Integer> mp= new HashMap<>();

        for(int i=0; i<nums.length; i++)
        {
            mp.put(nums[i], mp.getOrDefault(nums[i], 0)+1);
        }

        for(Map.Entry<Integer, Integer> e:mp.entrySet())
        {
            int ele=e.getKey();
            int freq=e.getValue();

            if(freq>1)
            {
                return ele;
                //break;
            }
        }

        return -1;
    }
}

