
in this question we have to return the total no of ways to reach n stair
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

example :- if n=3;
(n-1)+(n-2)=2+1=3
1 step+1 step+1 step
1 step+2 step
2 step+ 1step

so first we will use fibonacii number logic :-

base condition will be 
                if n==1 return 1 i.e if there is 1 stair so there is 1 way to climb
                if n==2 return 2 i.e if there is 2 stair so there are 2 ways to climb (1 step=1 step and 2 step) 


class Solution {
    public int climbStairs(int n) {

        //base condition
        if(n==1) return 1;
        if(n==2) return 2;

        int curr=0;
        int prev1=2;//f(n-1) for n==2 then 2 ways to climb
        int prev2=1;//f(n-2)  for n=12 there is 1 way to climb the stair

        //we will start from 3 becaue 1 and 2 are covered in base condition and just that values of ways to climb stair is stored in prev1 and prev2

        for(int i=3; i<=n; i++)
        {
           //so at n==3 we are calulating ways to climb the way by n=1 and n=2
            curr=prev1+prev2;

            //and here we agin mobving ahead the pointer pf prev2=prev1
            prev2=prev1;

            //prev1 will become curr
            prev1=curr;
        }
        //in the end return the curr value
        return curr;        
    }
}

Here we can use Dp also :-

class Solution
{
public int climbStairs(int n)
{

if(n==1) return 1;
if(n==2) return 2;
//dp array size is n=1 because of the we can not use zero index
  int[] dp= new int[n+1];

  dp[1]=1;
  dp[2]=2;

for(int i=3; i<=n; i++)
{
    dp[i]=dp[i-1]+dp[i-2];
}
return dp[n]
}
}
